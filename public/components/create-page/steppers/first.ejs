<template id="in-first-step">
	<v-container fluid grid-list-xl>
		<v-layout align-center row wrap>
			<v-flex xs12 class="pb-0" >
				Para começar-mos por favor informe o Título e a/as categoria(as) da página que você está criando e clique em avançar
			</v-flex>
			<v-flex xs12>
				<v-text-field
					label="Título *" hint="Obrigatório"
					v-model="title" color="white" @input="checkSelectes"
					:rules="[rules.length]" validate-on-blur
				></v-text-field>
			</v-flex>
			<v-flex xs12 md6>
				<v-text-field
					label="Subtítulo" hint="Não Obrigaório" @input="checkSelectes"
					v-model="nickname" color="white" clearable
				></v-text-field>
			</v-flex>
			<v-flex xs12 md6>
				<v-text-field
					label="Título Original" hint="Não Obrigaório" @input="checkSelectes"
					v-model="englishTitle" color="white" clearable
				></v-text-field>
			</v-flex>
			<v-flex xs12 v-if="items.length">
				<v-combobox
					v-model="selecteds" :items="items" clearable dont-fill-mask-blanks
					label="Categoria *" @input="checkSelectes" multiple color="white"
					hint="OBS: Selecione pelo menos uma categoria" persistent-hint
				>
					<template slot="selection" slot-scope="{ item, parent, selected }" v-if="item.text">
						<v-chip dark class="grey lighten-3 black--text" :selected="selected">
							<v-avatar color="#ef001c" class="white--text" :size="20">
								<small>{{ item.text.slice(0, 1).toUpperCase() }}</small>
							</v-avatar>
							<span class="pr-2">
								{{ item.text }}
							</span>
							<v-icon small @click="parent.selectItem(item)">close</v-icon>
						</v-chip>
					</template>
				</v-combobox>
			</v-flex>
		</v-layout>
	</v-container>
</template>

<script>
	Vue.component('in-first-step', {
		template: '#in-first-step',
		computed: {
			...mapGetters('create-page', [
				'pageInfos'
			])
		},
		data() {
			var title = <%- JSON.stringify(title) %>;
			if (title) {
				title = title.split('-').join(' ').trim()
				title = title.split(' ').map(word => {
					return word[0].toUpperCase() + word.slice(1)
				}).join(' ')
			} else {
				title = ''
			}
			return {
				items: <%- JSON.stringify(categories) %>,
				title: title,
				nickname: '',
				englishTitle: '',
				selecteds: [],
				rules: {
					length: value => value.length > 2 || 'O Título deve ter no mínimo 3 caracteres'
				}
			}
		},
		mounted () {
			const vm = this
			vm.$nextTick(() => {
				if (vm.pageInfos.categories.length) {
					vm.selecteds = vm.pageInfos.categories
					if (vm.pageInfos.title) vm.title = vm.pageInfos.title
					if (vm.pageInfos.nickname) vm.nickname = vm.pageInfos.nickname
					if (vm.pageInfos.englishTitle) vm.englishTitle = vm.pageInfos.englishTitle
					vm.setValidStep(true)
				}
			})
		},
		methods: {
			...mapActions('create-page', [
				'setPageInfos',
				'setValidStep'
			]),

			checkSelectes(payload) {
				if (payload.filter) this.selecteds = payload.filter(val => val.text !== undefined)
				const { pageInfos } = this
				if (this.selecteds.length) pageInfos.categories = this.selecteds
				pageInfos.title = this.title.trim()
				pageInfos.nickname = this.nickname
				pageInfos.englishTitle = this.englishTitle
				this.setPageInfos(pageInfos)
				this.setValidStep(this.selecteds.length > 0 && this.title)
			}
		}
	})
</script>
