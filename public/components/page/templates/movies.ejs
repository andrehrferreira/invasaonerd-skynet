<template id="in-template-movies">
	<section class=" animated fadeIn" ref="movies">

		<div class="row justify-end">
			<div class="in-edit-block-position text-left justify-end" v-if="editMode">
				<v-btn fab color="" class=" move mr-1" title="<%= __('Mover') %>" v-if="1 === 2">
					<v-icon color="primary">zoom_out_map</v-icon>
				</v-btn>

				<v-tooltip :open-delay="50" :close-delay="50" bottom>
					<v-btn
						slot="activator"
						class="mr-1 animated zoomIn faster" fab small
						@click.stop="editType('movies')"
					>
						<v-icon color="green">edit</v-icon>
					</v-btn>
					<span>Editar Filmes</span>
				</v-tooltip>

				<v-tooltip :open-delay="50" :close-delay="50" bottom>
					<v-btn slot="activator" fab small class="animated zoomIn faster" @click.stop="removeType('movies')">
						<v-icon color="#ef001c">delete</v-icon>
					</v-btn>
					<span>Deletar Filmes</span>
				</v-tooltip>
			</div>
		</div>

		<h3 class="mt-3">
			<%= __('Filmes') %>
		</h3>
		<div class="in-editor-section" id="movies">
			<swiper :options="swiperOption" ref="swiper">
				<swiper-slide v-if="movies.length" v-for="(movie, index) in movies" :key="index" class="in-movie-cover animated fadeIn"
				 :style="`background-image: url(${(movie.cover ? movie.cover : '')});
          height: ${$vuetify.breakpoint.width < 768 ? '500px' : '420px'}; cursor: pointer;`">
					<div @click.stop="seeMovieDetails(movie)" :title="movie.title" class="in-movie-preview-fade pa-1 ">
						<div class="container-fluid d-flex align-items-end in-movie-height">
							<div class="row">
								<div class="col-12">
									<h2 class="mb-0">{{ movie.title }}</h2>
									<p class="in-movie-small mb-1">{{ movie.release_date }}</p>
									<p class="in-movie-small mb-2 "><span v-for="number in numbers" :title="movie.vote_average">
											<i :class="starsRate(movie.vote_average, number)"></i>
										</span>
										{{ (movie.vote_average/2) }} <img class="imdb_img" src="<%= settings.url %>/assets/img/IMDB_Logo_2016.png">
									</p>
									<p class="in-movie-text pr-5">
										{{ formatOverview(movie.overview) }}
									</p>
								</div>
							</div>
						</div>
					</div>
				</swiper-slide>
				<div class="swiper-button-prev" slot="button-prev"></div>
				<div class="swiper-button-next" slot="button-next"></div>
				<div class="swiper-scrollbar" slot="scrollbar"></div>
				<div class="swiper-pagination" slot="pagination"></div>
			</swiper>
		</div>
		<div class="andre-margin-in-page"></div>
	</section>
</template>

<script>
	Vue.component("in-template-movies", {
		template: "#in-template-movies",
		computed: {
			...mapGetters('page', [
				'page',
				'editMode'
			]),
			...mapGetters('app', [
				'windowWidth'
			])
		},
		data() {
			return {
				numbers: [1, 2, 3, 4, 5],
				movies: [],
				swiperOption: {
					slidesPerView: 1,
					spaceBetween: 20,
					pagination: {
						el: '.swiper-pagination',
						clickable: true
					},
					navigation: {
						nextEl: '.swiper-button-next',
						prevEl: '.swiper-button-prev'
					}
				}
			}
		},
		mounted() {
			const movies = JSON.parse(JSON.stringify(this.page.movies))
			this.movies = movies.map(movie => {
				return this.formatDate(movie)
			}).sort((a, b) => {
				return new Date(b.release_date).getTime() - new Date(a.release_date).getTime()
			})
		},
		methods: {
			...mapActions('page', [
				'toggleModal',
				'setAdding',
				'setEditingType',
				'removeType',
				'setMovieDetails',
				'setMovieModal'
			]),
			...mapActions('app', [
				'scrollPageTo',
			]),

			seeMovieDetails(movie) {
				this.setMovieDetails(movie)
				this.setMovieModal(true)
			},

			formatDate(movie) {
				const dataArray = movie.release_date.split('/')
				const [day, mounth, year] = dataArray
				const newDataArray = [mounth, day, year]
				movie.release_date = newDataArray.join('/')
				return movie
			},

			starsRate(rate, number) {
				return number <= (parseInt(rate) / 2) ? 'fa fa-star text-warning' : 'far fa-star'
			},

			formatOverview(text) {
				if (text.length === 0) {
					return text
				} else if (text.length > 100 && this.$vuetify.breakpoint.width > 769) {
					return text.split(' ').slice(0, 50).join(' ') + '...'
				} else if (this.$vuetify.breakpoint.width <= 769) {
					return text.split(' ').slice(0, 15).join(' ') + '...'
				}
				return text + '...'
			},

			editType(type) {
				this.setEditingType(type)
				this.toggleModal(false)
				this.setAdding(true)
				setTimeout(() => {
					this.scrollPageTo(type)
				}, 20)
			}
		}
	})

</script>

<style>
	.in-movie-preview-fade {
		background: rgba(0, 0, 0, 1);
		background: -moz-linear-gradient(45deg, rgba(0, 0, 0, 1) 0%, rgba(1, 1, 1, 1) 5%, rgba(18, 18, 18, 0.15) 100%);
		background: -webkit-gradient(left bottom, right top, color-stop(0%, rgba(0, 0, 0, 1)), color-stop(5%, rgba(1, 1, 1, 1)), color-stop(100%, rgba(18, 18, 18, 0.15)));
		background: -webkit-linear-gradient(45deg, rgba(0, 0, 0, 1) 0%, rgba(1, 1, 1, 1) 5%, rgba(18, 18, 18, 0.15) 100%);
		background: -o-linear-gradient(45deg, rgba(0, 0, 0, 1) 0%, rgba(1, 1, 1, 1) 5%, rgba(18, 18, 18, 0.15) 100%);
		background: -ms-linear-gradient(45deg, rgba(0, 0, 0, 1) 0%, rgba(1, 1, 1, 1) 5%, rgba(18, 18, 18, 0.15) 100%);
		background: linear-gradient(45deg, rgba(0, 0, 0, 1) 0%, rgba(1, 1, 1, 1) 5%, rgba(18, 18, 18, 0.15) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#000000', endColorstr='#121212', GradientType=1);
		height: 100%;
	}

	.in-movie-cover {
		background-position: center;
		background-repeat: no-repeat;
		background-size: cover;
	}

	.in-movie-poster-view {
		height: 200px;
	}

	.in-movie-card-text {
		padding: 10px;
		color: white;
		background-color: rgba(0, 0, 0, 0.4)
	}

	.in-movie-card-text img {
		width: 35px;
		height: auto;
		margin: 0 0 4px 7px;
	}

	.imdb_img {
		height: auto;
		width: 40px;
		margin-left: 10px;
		margin-bottom: 5px;
	}

	.in-movie-height {
		height: 100%;
	}

	.in-movie-small {
		font-size: 14px;
		font-weight: 300;
		color: rgba(255, 255, 255, 1);

	}

	.in-movie-text {
		font-size: 14px;
		font-weight: 300;
		color: rgba(255, 255, 255, 0.8);
	}

	.swiper-button-next {
		height: 100%;
		position: absolute;
		top: 32px;
	}

	.swiper-button-prev {
		height: 100%;
		position: absolute;
		top: 32px;
	}

	.swiper-button-next {
		height: 100%;
		position: absolute;
		top: 32px;
	}

	.swiper-button-prev {
		height: 100%;
		position: absolute;
		top: 32px;
	}

	.swiper-button-next {
		height: 100%;
		position: absolute;
		top: 32px;
	}

	.swiper-button-prev {
		height: 100%;
		position: absolute;
		top: 32px;
	}


	@media (max-width: 766px) {
		.in-movie-poster {
			margin: 0 auto;
			display: block;
		}

		.in-movie-card-text {
			padding: 20px;
		}
	}

</style>
