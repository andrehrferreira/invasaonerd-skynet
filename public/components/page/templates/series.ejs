<template id="in-template-series">
	<section class=" animated fadeIn" ref="series">

		<div class="row justify-end">
			<div class="in-edit-block-position text-left justify-end" v-if="editMode">
				<v-btn fab color="" class=" move mr-1" title="<%= __('Mover') %>" v-if="1 === 2">
					<v-icon color="primary">zoom_out_map</v-icon>
				</v-btn>

				<v-tooltip :open-delay="50" :close-delay="50" bottom>
					<v-btn slot="activator" class="mr-1 animated zoomIn faster" fab small @click.stop="editType('series')">
						<v-icon color="green">edit</v-icon>
					</v-btn>
					<span>Editar Séries</span>
				</v-tooltip>

				<v-tooltip :open-delay="50" :close-delay="50" bottom>
					<v-btn slot="activator" fab small class="animated zoomIn faster" @click.stop="removeType('series')">
						<v-icon color="#ef001c">delete</v-icon>
					</v-btn>
					<span>Deletar Séries</span>
				</v-tooltip>

			</div>
		</div>

		<p v-if="tab === 'in-tab-series'" class="pl-2 in-videos-tab-h3 mb-0 py-3">
			<%= __('Séries') %>
		</p>
		<h3 v-else class="mt-3">
			<%= __('Séries') %>
		</h3>
		
		<div id="series">
			<swiper :options="swiperOption" ref="swiper" @transition-start="hideDetails" v-if="series.length > 1">
				<swiper-slide v-for="(serie, index) in series" :key="index" class="in-movie-cover animated fadeIn" :style="`background-image: url(${(serie.cover ? serie.cover : '')});
          height: ${$vuetify.breakpoint.width < 768 ? '500px' : '420px'};`">
					<div :title="serie.name" class="in-movie-preview-fade pa-1 ">
						<div class="container-fluid d-flex align-items-end in-movie-height">
							<div class="row align-items-end">
								<h2 class="mb-0 in-series-img-text-h2 ml-2">{{ serie.name }}</h2>
								<p class="in-series-img-data-text mb-1">{{ new Date(serie.first_air_date).toLocaleDateString() }}</p>
								<div class="col-12">
									<p class="in-movie-small mb-2 "><span v-for="number in numbers" :title="serie.vote_average">
											<i :class="starsRate(serie.vote_average, number)"></i>
										</span>
										{{ (serie.vote_average/2).toFixed(1) }}
										<a v-if="serie.imdb" :href="'https://www.imdb.com/title/' + serie.imdb" target="_blank">
											<img class="imdb_img" src="<%= settings.url %>/assets/img/IMDB_Logo_2016.png">
										</a>
										<a v-else :href="`https://www.themoviedb.org/tv/${serie.id}-${serie.name.split(' ').join('-')}`" target="_blank">
											<img class="imdb_img" src="/assets/img/tmdb_logo.png">
										</a>
									</p>
									<p style="max-height: 200px; overflow-y: hidden !important;" class="in-series-img-text-p mt-3 pr-5 mb-0" v-if="serieDetails.id !== serie.id">
										{{ serie.overview }}
									</p>

									<p style="max-height: 200px; overflow-y: hidden !important;" v-else class="in-series-img-text-p mt-3 mb-0 pr-5 " >
										{{ serieDetails.overview }}
									</p>
								</div>
								<div class="col-12 text-center" style="z-index: 1000;">
									<v-btn fab dark small flat>
										<v-icon v-if="!serieDetails.id && !loading" size="40" @click.stop.prevent="seeSerieDetails(serie)">expand_more</v-icon>
										<v-icon v-else size="40" @click.stop.prevent="hideDetails">expand_less</v-icon>
									</v-btn>
								</div>
							</div>
						</div>
					</div>
				</swiper-slide>
				<div class="swiper-button-prev" slot="button-prev"></div>
				<div class="swiper-button-next" slot="button-next"></div>
				<div class="swiper-scrollbar" slot="scrollbar"></div>
			</swiper>
			<div v-else v-for="(serie, index) in series" :key="index" class="in-movie-cover animated fadeIn" :style="`background-image: url(${(serie.cover ? serie.cover : '')});
				height: ${$vuetify.breakpoint.width < 768 ? '500px' : '420px'};`">
				<div :title="serie.name" class="in-movie-preview-fade pa-1 ">
					<div class="container-fluid d-flex align-items-end in-movie-height">
						<div class="row align-items-end">
							<h2 class="mb-0 in-series-img-text-h2 ml-2">{{ serie.name }}</h2>
							<p class="in-series-img-data-text mb-1">{{ new Date(serie.first_air_date).toLocaleDateString() }}</p>
							<div class="col-12">
								<p class="in-movie-small mb-2 "><span v-for="number in numbers" :title="serie.vote_average">
										<i :class="starsRate(serie.vote_average, number)"></i>
									</span>
									{{ (serie.vote_average/2).toFixed(1) }}
									<a v-if="serie.imdb" :href="'https://www.imdb.com/title/' + serie.imdb" target="_blank">
										<img class="imdb_img" src="<%= settings.url %>/assets/img/IMDB_Logo_2016.png">
									</a>
									<a v-else :href="`https://www.themoviedb.org/tv/${serie.id}-${serie.name.split(' ').join('-')}`" target="_blank">
										<img class="imdb_img" src="/assets/img/tmdb_logo.png">
									</a>
									 <small class="">{{ serie.vote_count }} votos</small> <br>
								</p>
								<p style="max-height: 200px; overflow-y: hidden !important;" class="in-series-img-text-p mt-3 pr-5 mb-0" v-if="serieDetails.id !== serie.id">
									{{ serie.overview }}
								</p>
								<p style="max-height: 200px; overflow-y: hidden !important;" v-else class="in-series-img-text-p mt-3 mb-0 pr-5" >
									{{ serieDetails.overview }}
								</p>
							</div>
							<div class="col-12 text-center" style="z-index: 1000;">
								<v-tooltip :open-delay="50" :close-delay="50" top>
									<v-btn slot="activator" fab dark small flat>
										<v-icon v-if="!serieDetails.id && !loading" size="40" @click.stop.prevent="seeSerieDetails(serie)">expand_more</v-icon>
										<v-icon v-else size="40" @click.stop.prevent="hideDetails">expand_less</v-icon>
									</v-btn>
									<span>{{ !serieDetails.id && !loading ? 'Ver Mais' : 'Ver Menos' }}</span>
								</v-tooltip>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div id="seriedetails">
			<div v-if="!loading && serieDetails.id">
				<div id="seriedetailss" class="col-12 animated fadeIn">
					<div class="row">
						<div class="col-12 p-0 my-3" v-if="serieDetails.seasons.length">
							<h4>Temporadas</h4>
							<swiper :options="swiperOptionSeasons" ref="swiper">
								<swiper-slide v-if="season.name && season.name !== 'Specials'" v-for="(season, index) in serieDetails.seasons"
								 :key="index" class="in-movie-cover animated fadeIn" :style="`background-image: url(${(season.poster_path ? 'https://image.tmdb.org/t/p/w500' + season.poster_path : '')});
									height: ${$vuetify.breakpoint.width < 560 ? '350px' : '500px'}; background-repeat: no-repeat; background-position: center;
									background-size: cover;`">
									<div @click.stop="seeSeasonDetails(season)" :title="season.name" class="in-movie-preview-fade pa-1 ">
										<div class="container-fluid d-flex align-items-end in-movie-height">
											<div class="row">
												<div class="col-12">
													<h2 class="mb-0">{{ season.name }}</h2>
													<p class="in-movie-small mb-1">{{ new Date(season.air_date).toLocaleDateString() }}</p>
													<p  v-if="season.overview" class="in-movie-text pr-5">
														{{ formatOverview(season.overview) }}
													</p>
												</div>
												<div class="col-12" style="text-align: end;">
													<v-btn @click.stop="seeSeasonDetails(season)" flat dark small>
														<v-icon class="mr-1" small>add</v-icon>
														Ver mais
													</v-btn>
												</div>
											</div>
										</div>
									</div>
								</swiper-slide>
								<div class="swiper-button-prev" slot="button-prev"></div>
								<div class="swiper-button-next" slot="button-next"></div>
								<div class="swiper-scrollbar" slot="scrollbar"></div>
								<div class="swiper-pagination" slot="pagination"></div>
							</swiper>
						</div>
					</div>
					<div class="row pb-3">
						<div class="col-12 p-0" v-show="serieDetails.images.backdrops.length">
							<h4>Imagens de {{ serieDetails.name }}</h4>
							<v-dialog class="in-specialborder" persistent max-width="1100px" v-model="imgModalSerie" transition="dialog-transition">
								<div class="in-specialborder-modal-series" v-if="selectedImage.file_path">
									<v-img :src="'https://image.tmdb.org/t/p/original' + selectedImage.file_path">
										<v-fab-transition class="mt-2">
											<v-btn class="mt-2" color="#f1041f" fab @click.stop="imgModalSerie = false" dark small absolute right>
												<v-icon>close</v-icon>
											</v-btn>
										</v-fab-transition>
									</v-img>
									<div class="black pb-3">
										<swiper :options="swiperOptionThumbs" class="gallery-thumbs" ref="swiperThumbs">
											<swiper-slide v-for="(image, index) in serieDetails.images.backdrops" :class="'slide-' + (index + 1)" :key="index"
											 style="background-color: #333; cursor: pointer;">
												<v-img @click.stop="selectedImage = image" :src="'https://image.tmdb.org/t/p/w200' + image.file_path"></v-img>
											</swiper-slide>
											<div class="swiper-button-prev" slot="button-prev"></div>
											<div class="swiper-button-next" slot="button-next"></div>
										</swiper>
									</div>
								</div>
							</v-dialog>
							<swiper :options="swiperOptionDetails">
								<swiper-slide v-for="(image, index) in serieDetails.images.backdrops" :class="'slide-' + (index + 1)" :key="index"
								 style="background-color: #333; cursor: pointer;">
									<v-img @click.stop="openImage(image)" :src="'https://image.tmdb.org/t/p/w500' + image.file_path"></v-img>
								</swiper-slide>
								<div class="swiper-pagination" slot="pagination"></div>
								<div class="swiper-button-prev" slot="button-prev"></div>
								<div class="swiper-button-next" slot="button-next"></div>
							</swiper>
						</div>
					</div>
				</div>
			</div>
			<div v-if="loading" class="animated fadeIn">
				<in-loading />
			</div>
		</div>
		<div v-if="tab !== 'in-tab-series'" class="andre-margin-in-page"></div>
	</section>
</template>

<script>
	Vue.component("in-template-series", {
		template: "#in-template-series",
		computed: {
			...mapGetters('page', [
				'page',
				'editMode'
			]),
			...mapGetters('app', [
				'windowWidth',
				'tab'
			])
		},
		data() {
			return {
				swiperOptionThumbs: {
					spaceBetween: 5,
					slidesPerView: 6,
					lazy: true,
					navigation: {
						nextEl: '.swiper-button-next',
						prevEl: '.swiper-button-prev'
					}
				},
				isResume: true,
				numbers: [1, 2, 3, 4, 5],
				series: [],
				serieDetails: {},
				loading: false,
				selectedImage: {},
				imgModalSerie: false,
				swiperOption: {
					slidesPerView: 1,
					spaceBetween: 20,
					grabCursor: true,
					pagination: {
						el: '.swiper-pagination',
						clickable: true
					},
					navigation: {
						nextEl: '.swiper-button-next',
						prevEl: '.swiper-button-prev'
					}
				},
				swiperOptionDetails: {
					slidesPerView: 5,
					spaceBetween: 15,
					pagination: {
						el: '.swiper-pagination',
						type: 'progressbar'
					},
					navigation: {
						nextEl: '.swiper-button-next',
						prevEl: '.swiper-button-prev'
					},
					breakpoints: {
						1024: {
							slidesPerView: 4,
							spaceBetween: 15
						},
						768: {
							slidesPerView: 3,
							spaceBetween: 15
						}
					}
				},
				swiperOptionSeasons: {
					slidesPerView: 3,
					spaceBetween: 15,
					grabCursor: true,
					pagination: {
						el: '.swiper-pagination',
						type: 'progressbar'
					},
					navigation: {
						nextEl: '.swiper-button-next',
						prevEl: '.swiper-button-prev'
					},
					breakpoints: {
						700: {
							slidesPerView: 2,
							spaceBetween: 15
						},
						500: {
							slidesPerView: 1,
							spaceBetween: 10
						}
					}
				}
			}
		},
		mounted() {
			const series = JSON.parse(JSON.stringify(this.page.series))
			this.series = series.map(serie => {
				return this.formatDate(serie)
			}).sort((a, b) => {
				return new Date(b.first_air_date).getTime() - new Date(a.first_air_date).getTime()
			})
			this.seeSerieDetails(this.series[0], true)
		},
		methods: {
			...mapActions('page', [
				'toggleModal',
				'setAdding',
				'setEditingType',
				'removeType',
				'setSeasonDetails',
				'setSeasonModal',
				'setPage'
			]),
			...mapActions('app', [
				'scrollPageTo',
			]),

			hideDetails: async function () {
				if (this.serieDetails.id) {
					this.selectedImage = await {}
					this.serieDetails = await {}
				}
			},

			openImage(image) {
				this.selectedImage = image
				this.imgModalSerie = true
			},

			seeSerieDetails: async function (serie, mounted) {
				if (serie.id !== this.serieDetails.id) {
					this.loading = await true
					const response = await this.$http.get('/api/series-details/' + serie.id)
					const {
						data
					} = await response
					data.seasons = await data.seasons.filter(season => {
						return season.name !== 'Specials'
					})
					this.serieDetails = await { ...data,
						...serie
					}
					if (data.seasons.length === 1) {
						this.swiperOptionSeasons.slidesPerView = await 1
					} else {
						this.swiperOptionSeasons.slidesPerView = await 3
					}
					await setTimeout(async () => {
						this.loading = await false
					}, 100)
				}
			},

			seeSeasonDetails(season) {
				season.serieId = this.serieDetails.id
				season.serieName = this.serieDetails.name
				this.setSeasonDetails(season)
				this.setSeasonModal(true)
			},

			formatDate(serie) {
				const dataArray = serie.first_air_date.split('/')
				const [day, mounth, year] = dataArray
				const newDataArray = [mounth, day, year]
				serie.first_air_date = newDataArray.join('/')
				return serie
			},

			starsRate(rate, number) {
				return number <= (parseInt(rate) / 2) ? 'fa fa-star text-warning' : 'far fa-star'
			},

			formatOverview(text) {
				if (text.length === 0) {
					return text
				} else if (text.length > 100 && this.$vuetify.breakpoint.width > 769) {
					return text.split('').slice(0, 200).join('') + '...'
				} else if (this.$vuetify.breakpoint.width <= 769) {
					return text.split('').slice(0, 100).join('') + '...'
				}
				return text + '...'
			},

			editType(type) {
				this.setEditingType(type)
				this.toggleModal(false)
				this.setAdding(true)
				setTimeout(() => {
					this.scrollPageTo(type)
				}, 20)
			}
		}
	})

</script>

<style>
	.swiper-pagination-progressbar-fill {
		background-color: #ef001c !important;
	}

	.swiper-button-prev[aria-disabled="false"],
	.swiper-button-next[aria-disabled="false"] {
		cursor: pointer !important;
	}

	.in-see-more-series {
		height: 120px;
		position: absolute;
		width: 100%;
		bottom: 5px;
		background: -moz-linear-gradient(top, rgba(18, 18, 18, 0.4) 40%, rgba(18, 18, 18, 1) 100%);
		background: -webkit-linear-gradient(top, rgba(18, 18, 18, 0.4) 40%, rgba(18, 18, 18, 1) 100%);
		background: linear-gradient(to bottom, rgba(18, 18, 18, 0.4) 40%, rgba(18, 18, 18, 1) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#a6000000', GradientType=0);
	}

	.in-see-more-text-series {
		position: relative;
		top: 100px;
		cursor: pointer;
	}

	.in-specialborder-modal-series {
		border: 1px solid #3c3c3c;
		-webkit-box-shadow: inset 0px 0px 1px 1px rgba(64, 64, 64, 1);
		-moz-box-shadow: inset 0px 0px 1px 1px rgba(64, 64, 64, 1);
		box-shadow: inset 0px 0px 1px 1px rgba(64, 64, 75, 1);
	}

</style>
