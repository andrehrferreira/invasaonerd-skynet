<template id="in-template-videos-tab">
	<div>
		<v-layout row wrap class="py-3">
      <v-flex xs12>
        <p class="pl-2 in-videos-tab-h3 mb-0">Videos</p>
      </v-flex>
      <v-flex xs12 id="toplay">
				<v-layout row wrap justify-end v-if="toPlay.id">
					<v-tooltip :open-delay="50" :close-delay="50" left>
						<v-btn slot="activator" icon color="#ef001c" @click.stop="toPlay = {}">
							<v-icon>close</v-icon>
						</v-btn>
						<span>Fechar Vídeo</span>
					</v-tooltip>
				</v-layout>
				<div v-if="toPlay.id" :id="toPlay.id" class="col-12 embed-responsive embed-responsive-16by9">
					<iframe class="in-videos-item-player-iframe pa-1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen
					 :src="'https://www.youtube.com/embed/' + toPlay.id + '?autoplay=1'">
					</iframe>
				</div>
			</v-flex>
			<v-flex v-for="(video, index) in page.videos" class="pa-1" :key="index" xs12 md4 lg3 xl2>
				<div class="text-left" @click.stop="play(video)" :title="video.name">
					<img class="in-videos-preview-item-thumb" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen :src="video.thumbnails.medium.url" />
					<div class="in-videos-preview-item-title">
						<p>{{video.title}}</p>
					</div>
					<div class="in-videos-preview-item-author mb-5">
						Publicação: {{ new Date(video.publishedAt).toLocaleDateString() }}
					</div>
				</div>
			</v-flex>
		</v-layout>
	</div>
</template>
<script>
	Vue.component('in-template-videos-tab', {
		template: '#in-template-videos-tab',
		computed: {
			...mapGetters('page', [
				'page',
				'editMode'
			])
		},
		data() {
			return {
				toPlay: {}
			}
		},
		created() {
			const tab = parseInt(new URL(location.href).searchParams.get('t'))
			const play = parseInt(new URL(location.href).searchParams.get('p'))
			if (play === 1 && tab === 8) {
				this.toPlay = this.page.videos[0]
			}
		},
		mounted() {
			const vue = this
			vue.$nextTick(() => {
				setTimeout(() => {
					vue.scrollPageTo('toplay')
				}, 1000)
			})
		},
		methods: {
			...mapActions('page', [
				'toggleModal',
				'setAdding',
				'setEditingType',
				'removeType',
				'setMovieDetails',
				'setMovieModal'
			]),
			...mapActions('app', [
				'scrollPageTo',
			]),
      play(video) {
				this.toPlay = {}
				setTimeout(() => {
					this.toPlay = video
				}, 50)
				setTimeout(() => {
					this.scrollPageTo(video.id)
				}, 100)
			},
		}
	})

</script>
<style>
	.in-videos-tab-h3{
		padding: 0px;
		padding-bottom: 0px;
		font-size: 32px;
		letter-spacing: 2px;
		font-weight: 300;
		color: rgba(255,255,255,0.8)
	}
</style>
