<template id="in-editor-type-channels">
  <div id="channels" class="in-editor-box-step animated fadeIn">
    <div v-if="channels.length > 0" class="in-editor-section in-channels-preview">
      <v-layout row wrap justify-space-between>
        <v-flex d-flex>
          <v-layout justify-start>
            <h5><%= __('Preview') %></h5>
          </v-layout>
        </v-flex>
        <v-flex d-flex>
          <v-layout justify-end>
            <v-tooltip :open-delay="50" :close-delay="50" bottom>
              <v-btn slot="activator" color="success" dark icon @click.stop="save(channels)">
                <v-icon>save</v-icon>
              </v-btn>
              <span>Salvar Canais Relacionados</span>
            </v-tooltip>
          </v-layout>
        </v-flex>
      </v-layout>
      <swiper :options="swiperOption">
        <swiper-slide v-for="(channel, index) in channels" :key="index" class="in-channels-preview-item">
          <div @click.stop="deselect(channel)" :title="channel.title">
            <img :src="channel.thumbnails.medium.url"
              class="in-editor-channel-thumb img-fluid"
            />
            <div class="in-editor-channel-title text-center">
              {{channel.title}}
            </div>
          </div>
        </swiper-slide>

        <!-- Optional controls -->
        <div class="swiper-button-prev" slot="button-prev"></div>
        <div class="swiper-button-next" slot="button-next"></div>
        <div class="swiper-scrollbar"   slot="scrollbar"></div>
        <div class="swiper-pagination" slot="pagination"></div>
      </swiper>
    </div>

    <h5><%= __('Pesquisar: Canais Relacionados') %></h5>
    <div class="container" style="padding: 0px">
      <div class="row animated fadeIn" v-if="error">
        <div class="col-12">
          <div class="alert alert-danger" role="alert">
          <span><%= __('Ocorreu erro ao tentar comunicação com o servidor') %></span>
          <button
            type="button" class="close" data-dismiss="alert"
            aria-label="Close" @click.stop="error=false">
            <span aria-hidden="true">&times;</span>
          </button>
          </div>
        </div>
      </div>

      <div class="row">
        <div class="col-xl-10 col-md-8 col-sm-12 mb-2">
          <input class="in-editor-box-title-input" placeholder="<%= __('Buscar por:') %>" v-model="search" />
        </div>
        <div class="col-xl-2 col-md-4 col-sm-12">
          <button class="in-editor-box-search-button" @click.stop="get('/api/yt-channels')">
            <i class="fas fa-search"></i>
          </button>
        </div>
      </div>

      <div v-if="!loading">
        <div class="in-editor-section" v-if="list.length > 0">
          <div class="in-editor-section-title">
            <%= __('Canais Relacionados') %>
            <hr/>
          </div>
          <div class="in-editor-section-contents">
            <div class="in-editor-channel-container">
              <div class="in-editor-channel-item" v-for="(channel, index) in list" :key="index"
                @click.stop="pushChannel(channel)" v-if="!channels.includes(channel)">
                <img :src="channel.thumbnails.medium.url" class="in-editor-channel-thumb" />
                <div class="in-editor-channel-title">{{channel.title}}</div>
              </div>
            </div>
          </div>
        </div>
        <div v-else>
          <span>Não vídeos para exibir</span>
        </div>
      </div>
    </div>
    <div class="in-loading" v-if="loading">
      <in-loading />
    </div>
  </div>
</template>

<script>
  Vue.component('in-editor-type-channels', {
    template: '#in-editor-type-channels',
    computed: {
      ...mapGetters('page', [
        'page',
        'swiperOption',
        'buttonState',
        'editingType'
      ])
    },
    mounted () {
      this.search = this.page.title
      this.channels = this.page.channels ? this.page.channels : []
      this.get('/api/yt-channels')
    },
    data () {
      return {
        title: 'Canais Relacionados',
        loading: false,
        channels: [],
        error: false,
        search: '',
        list: []
      }
    },
    methods: {
      ...mapActions('page', [
        'setPage',
        'setAdding',
        'setEditingType'
      ]),
      ...mapActions('app', [
        'showDialog',
      ]),

      pushChannel (toAdd) {
        this.list = this.list.filter(channel => {
          return channel.id !== toAdd.id
        })
        this.channels.push(toAdd)
      },

      deselect: function(toRemove) {
        this.channels = this.channels.filter(channel => {
          return channel.id !== toRemove.id
        })
        this.list.push(toRemove)
      },

      get (url) {
        this.loading = true
        const vm = this
        const ids = this.channels.map(channel => channel.id)
        vm.$http.get(url + '/' + encodeURIComponent(vm.search))
          .then(res => {
            vm.list = res.data.filter(channel => {
              return channel.title.toLocaleLowerCase()
                      .includes(vm.search.toLocaleLowerCase()) ||
                    channel.description.toLocaleLowerCase()
                      .includes(vm.search.toLocaleLowerCase())
            }).filter(channel => {
              return !ids.includes(channel.id)
            })
            vm.loading = false
          }, err => {
            vm.loading = false
            vm.error = true
          })
      },

      save (channels) {
        const { page } = this
        
        if (channels.length) {
          page.channels = channels
        } else {
          delete page.channels
        }
        page.changes.push({
          type: this.editingType
        })
        this.setPage(page)
        this.setAdding(false)
        this.setEditingType('')
        this.showDialog({
          message: `Edições de ${this.title} gravadas para envio`,
          color: 'success',
          icon: 'check-circle'
        })
      }
    }
  })
</script>

<style>
  .in-channels-preview {
    width: 100%;
    text-align: center;
    flex-wrap: wrap;
    overflow: hidden;
  }

  .in-games-preview .swiper-container {
    width: 100%;
    height: 280px !important;
  }

  .in-channels-preview-item {
    width: 120px;
    height: 200px;
    overflow: hidden;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    background-color: rgba(0, 0, 0, 0);
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    color: #333;
    text-align: left !important;
    -webkit-transition: 0.2s ease-in-out;
    -moz-transition: 0.2s ease-in-out;
    -o-transition: 0.2s ease-in-out;
    transition: 0.2s ease-in-out;
    cursor: pointer;
  }

  .in-editor-channel-title {
    padding: 10px;
    text-shadow: none;
    line-height: 18px;
    color: white;
    font-size: 13px;
    text-overflow: ellipsis;
    white-space: normal;
    overflow: hidden;
  }

  .in-editor-channel-container {
    text-align: left;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    flex-direction: row;
  }
  
  .in-editor-channel-item {
    width: 120px;
    height: 220px;
    background-color: rgba(0, 0, 0, 0);
    margin: auto;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
    align-self: center;
    margin-bottom: 10px
  }

  .in-editor-channel-thumb {
    width: 100% !important;
    height: auto;
    display: block;
    border: 0;
    position: relative;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 100%;
  }
</style>