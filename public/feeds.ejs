<!DOCTYPE html>
<html lang="pt-br">

<head>
	<title>
		<%= __('Appname') %>
	</title>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/emoji-mart-vue@2.6.6/css/emoji-mart.min.css">
	<link href="https://cdn.jsdelivr.net/npm/video.js@6.6.2/dist/video-js.css" rel="stylesheet">
	<link href="https://cdn.jsdelivr.net/npm/vue-video-player@5.0.0/src/custom-theme.css" rel="stylesheet">

	<script src="https://cdnjs.cloudflare.com/ajax/libs/video.js/6.6.2/video.min.js"></script>
	<%- include('meta/header') %>
	<script src="https://cdn.jsdelivr.net/npm/vue-video-player@5.0.0/dist/vue-video-player.js"></script>

	<meta name="description" content="A maior comunidade nerd do brasil">
	<meta property="og:description" content="A maior comunidade nerd do brasil">

	<meta property="og:image" content="<%= settings.url %>/assets/img/logo-256-white.png">
	<meta property="og:image:type" content="image/png">
	<meta property="og:image:width" content="256">
	<meta property="og:image:height" content="256">

	<meta name="og:title" property="og:title" content="Invasão Nerd">
	<meta property="og:site_name" content="<%= __('Appname') %>">
	<meta property="og:locale" content="pt-br">
	<meta property="og:url" content="<%= settings.url %>">
	<meta property="og:type" content="website">

	<%- include('./meta/gtag.ejs') %>
	<%- include('components/app/navbar') %>
	<%- include('components/app/sidebar') %>
	<%- include('components/app/snackbar') %>
	<%- include('components/app/loading') %>
	<%- include('components/app/hero') %>

	<script>
		if (!window['YT']) {var YT = {loading: 0,loaded: 0};}if (!window['YTConfig']) {var YTConfig = {'host': 'http://www.youtube.com'};}if (!YT.loading) {YT.loading = 1;(function(){var l = [];YT.ready = function(f) {if (YT.loaded) {f();} else {l.push(f);}};window.onYTReady = function() {YT.loaded = 1;for (var i = 0; i < l.length; i++) {try {l[i]();} catch (e) {}}};YT.setConfig = function(c) {for (var k in c) {if (c.hasOwnProperty(k)) {YTConfig[k] = c[k];}}};var a = document.createElement('script');a.type = 'text/javascript';a.id = 'www-widgetapi-script';a.src = 'https://s.ytimg.com/yts/jsbin/www-widgetapi-vflN2g023/www-widgetapi.js';a.async = true;var c = document.currentScript;if (c) {var n = c.nonce || c.getAttribute('nonce');if (n) {a.setAttribute('nonce', n);}}var b = document.getElementsByTagName('script')[0];b.parentNode.insertBefore(a, b);})();}
	</script>

	<%- include('components/feeds/timeline.ejs') %>
	<%- include('components/feeds/comments-likes.ejs') %>
	<div id="app">
		<v-app dark>
			<div ref="ready" style="display: none;">
				<div>
					<in-sidebar :options="{ page: {} }" />
				</div>
				<div>
					<in-navbar />
				</div>
				<v-content>
					<v-container fill-height fluid class="pa-0">
						<v-layout justify-center align-center>
							<v-flex xs12>
								<v-layout v-if="!feed">
									<v-flex xs12 id="in-hero">
										<in-hero />
									</v-flex>
								</v-layout>
								<v-container :class="{ 'py-2': true, 'px-0': bp.xs }">
									<v-layout row justify-center>
										<v-flex lg3 xl2 fill-height v-if="bp.lgAndUp && user._id">
											<v-card class="mr-2" ref="user">
												<v-flex xs12 v-if="user.name">
													<v-layout row justify-center align-center class="pa-3 grey darken-3">
														<v-flex class="justify-start" xs4 class="">
															<v-badge overlap bottom left color="transparent">
																<!-- <v-btn icon flat small slot="badge" color="success">
																	<v-icon>edit</v-icon>
																</v-btn> -->
																<v-avatar size="55">
																	<v-img :src="`/image/${user._id}/useravatar.jpg`" height="55px" contain></v-img>
																</v-avatar>
															</v-badge>
														</v-flex>
														<v-flex xs8 class="pl-1">
															<v-layout column>
																<p class="mb-0 in-user-menu-name text-truncate">{{ user.name }}</p>
																<p class="mb-0 in-user-info-small-info text-truncate">{{ user.email }}</p>
																<p class="mb-0 in-user-info-small-info text-truncate">Points: {{ user.points }}
																	<small class="ml-1 px-1 red darken-4 text-truncate" v-if="user.superadmin">SuperAdmin</small>
																	<small class="ml-1 px-1 orange darken-4 text-truncate" v-else-if="user.admin">Admin</small>
																</p>
															</v-layout>
														</v-flex>
													</v-layout>
												</v-flex>
											</v-card>
											<v-card class="mr-2 mt-2" id="userpages" ref="userpages" :max-height="bp.height - 180" style="overflow-y: auto">
												<v-subheader class="grey--text" v-if="userPages.length">
													Atualizações
												</v-subheader>
												<v-list class="py-0">
													<template v-for="(page, index) in userPages" >
														<v-list-tile :key="index" avatar :href="'/page/' + page.url" class="animated fadeIn">
															<v-badge overlap color="#ef001c" :value="page.notifications > 0">
																<p class="mb-0 caption" slot="badge">{{ page.notifications > 10 ? '9+' : page.notifications }}</p>
																<v-tooltip :open-delay="50" :close-delay="50" right>
																	<v-avatar slot="activator" :size="32">
																		<img :src="`/image/${page.url}/miniavatar.jpg`" @error="setDefaultImage" alt="">
																	</v-avatar>
																	<span v-if="page.notifications">{{ page.notifications }} atualizações</span>
																	<span v-else>Sem novas atualizações</span>
																</v-tooltip>
															</v-badge>
															<v-list-tile-content class="ml-3">
																<v-list-tile-title>{{ page.title }}</v-list-tile-title>
																<v-list-tile-sub-title v-if="page.nickname">
																	<p class="caption mb-0 grey--text">{{ page.nickname }}</p>
																</v-list-tile-sub-title>
															</v-list-tile-content>
														</v-list-tile>
													</template>
													<div v-if="user.pages">
														<v-list-tile v-if="user.pages.length - userPages.length > 0" @click="requestUserPages(userPages.length + 20)">
															<v-list-tile-action>
																<v-tooltip :open-delay="50" :close-delay="50" right>
																	<v-btn icon slot="activator" :loading="loading">
																		<v-icon color="grey--text lighten-3">arrow_drop_down</v-icon>
																	</v-btn>
																	<span>Ver mais {{ user.pages.length - userPages.length }}</span>
																</v-tooltip>
															</v-list-tile-action>
															<v-list-tile-title color="grey--text lighten-3">Ver mais {{ user.pages.length - userPages.length }}</v-list-tile-title>
														</v-list-tile>
													</div>
												</v-list>
											</v-card>
										</v-flex>
										<v-flex xs12 sm10 md8 lg6 xl4>
											<in-timeline :feeds="feeds" @set-feeds="setFeeds"/>
										</v-flex>
									</v-layout>
									<v-fab-transition>
										<v-btn
											:large="bp.lgAndUp" :small="bp.xs"
											v-show="backToTop" color="#ef001c"
											dark fixed bottom right fab
											@click.stop="scrollPageTo('app')"
										>
											<v-icon :large="bp.lgAndUp" :small="bp.xs">expand_less</v-icon>
										</v-btn>
									</v-fab-transition>
								</v-container>
							</v-flex>
						</v-layout>
					</v-container>
				</v-content>
				<div>
					<in-snackbar />
				</div>
			</div>
		</v-app>
	</div>
	<%- include('./meta/footer') %>
	<script src="https://cdn.jsdelivr.net/npm/emoji-mart-vue@2.6.6/dist/emoji-mart.min.js"></script>
	<script>
		const { Picker } = EmojiMart
		Vue.component('picker', Picker)
		Vue.use(VueVideoPlayer)
		new Vue({
			store: new Vuex.Store({
				modules: {
					app: {
						namespaced: true,
						state: <%- include('store/app/state.js') %>,
						getters: <%- include('store/app/getters.js') %>,
						mutations: <%- include('store/app/mutations.js') %>,
						actions: <%- include('store/app/actions.js') %>
					}
				}
			}),
			el: '#app',
			computed: {
				...mapGetters('app', ['user', 'userPages', 'icons']),

				bp () {
					return this.$vuetify.breakpoint
				}
			},
			data () {
				const feed = <%- JSON.stringify(feed) %>
				const feeds = <%- JSON.stringify(feeds) %>
				return {
					feeds: feeds.length ? feeds : [feed],
					feed: feed,
					loadingFeed: false,
					loading: false,
					hasNext: true,
					backToTop: false,
					hasAtt: false
				}
			},
			methods: {
				...mapActions('app', ['setUser', 'scrollPageTo', 'setUserPages']),

				handleUploaded(resp) {
					console.log(resp)
				},

				setFeeds ({ feeds }) {
					this.feeds = feeds
				},

				setDefaultImage(event) {
					event.target.src = '/assets/img/avatardefault.jpeg'
				},

				async loadMoreFeeds (skip) {
					const vue = this
					vue.loadingFeed = true
					try {
						const { data } = await vue.$http.post('/feeds', { skip })
						vue.hasNext = data.length > 0
						vue.feeds = [...vue.feeds, ...data]
					} catch (err) {
						console.log(err)
					}
					vue.loadingFeed = false
				},

				requestUserPages(limit) {
					const vm = this
					vm.loading = true
					vm.$http.post('/pages-info', {
							pages: vm.user.pages.filter((item, index) => {
								return !vm.userPages.some(page => page.id === item) && index < limit
							})
						})
						.then(res => {
							const { data } = res
							const { user } = vm
							data.map(page => {
								if (user.notifications.some(n => n.pageId === page.id)) {
									page.notifications = user.notifications.filter(n => n.pageId === page.id && n.new).length
								} else {
									page.notifications = 0
								}
								vm.userPages.push(page)
							})
							vm.setUserPages(vm.userPages.sort((a, b) => b.notifications - a.notifications))
							if (limit === vm.user.pages.length && vm.userPages.length !== vm.user.pages.length) {
								user.pages = vm.userPages.map(page => {
									return page.id
								})
								vm.$http.put('/user', { user }).then(res => {
									if (res.data.status) {
										vm.setUser(user)
									}
								})
							}
							vm.loading = false
							vm.firstRequest = true
						})
				}
			},
			created() {
				const vue = this
				vue.setUser(<%- JSON.stringify(user) %>)
			},
			mounted() {
				const vue = this
				var aux = 0
				if (!vue.feed) {
					window.addEventListener('scroll', (e) => {
						let { scrollTop, scrollHeight, clientHeight } = e.target.documentElement

						vue.backToTop = scrollTop > clientHeight

						if (vue.bp.lgAndUp) {
							
							var { user, userpages } = vue.$refs
							user = user.$el
							userpages = userpages.$el
							let userWidth = user.clientWidth
							let userPagesWidth = userpages.clientWidth
							
							if (scrollTop >= vue.bp.height - (vue.bp.height/2) && !aux) {
								user.setAttribute('style', `position: fixed; top: 68px; width: ${userWidth}px`)
								userpages.setAttribute('style', `position: fixed; top: 160px; width: ${userWidth}px; max-height: ${vue.bp.height - 180}px; overflow-y: auto;`)
								aux = 1
							} else if (scrollTop <= vue.bp.height - (vue.bp.height/2) && aux) {
								user.setAttribute('style', ``)
								userpages.setAttribute('style', `max-height: ${vue.bp.height - 180}px; overflow-y: auto;`)
								aux = 0
							}
						}

						let percent = parseInt((scrollTop/(scrollHeight - clientHeight)) * 100)
						if (percent >= 60 && !vue.loadingFeed && vue.hasNext) {
							vue.loadMoreFeeds(vue.feeds.length)
						}
					})
				}

				vue.$nextTick(() => {
					if (vue.user.pages && vue.bp.lgAndUp) {
						vue.requestUserPages(10)
					}
				})
				vue.$refs.ready.style.display = 'block'
			},
			beforeMount() {
				var loading = document.querySelector("#loading")
				document.body.removeChild(loading)
			}
		})
	</script>

	<style>
		#in-hero .v-parallax__content {
			padding: 0 !important;
		}
	</style>
</body>

</html>
