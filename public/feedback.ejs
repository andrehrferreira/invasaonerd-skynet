<!DOCTYPE html>
<html lang="pt-br">

<head>
	<title>
		<%= __('Appname') %>
	</title>
	<link rel="stylesheet" href="<%= settings.url %>/assets/cdns/css/bootstrap.min.css" />
	<%- include('meta/header') %>
	<link rel="stylesheet" type="text/css" href="<%= settings.url %>/assets/css/page.css" />
	<link rel="stylesheet" href="<%= settings.url %>/assets/css/feedback.css" />

	<meta name="description" content="A maior comunidade nerd do brasil">
	<meta property="og:description" content="A maior comunidade nerd do brasil">

	<meta property="og:image" content="<%= settings.url %>/assets/img/logo-256-white.png">
	<meta property="og:image:type" content="image/png">
	<meta property="og:image:width" content="256">
	<meta property="og:image:height" content="256">

	<meta name="og:title" property="og:title" content="Invasão Nerd">
	<meta property="og:site_name" content="<%= __('Appname') %>">
	<meta property="og:locale" content="pt-br">
	<meta property="og:url" content="<%= settings.url %>">
	<meta property="og:type" content="website">

	<%- include('./meta/gtag.ejs') %>

	<%- include('components/app/navbar') %>
	<%- include('components/app/sidebar') %>
	<%- include('components/app/snackbar') %>
	<div id="app">
		<v-app dark>
			<div ref="ready" style="display: none;">
				<div>
					<in-sidebar :options="{ page: pages }" />
				</div>
				<div>
					<in-navbar />
				</div>
				<v-content>
					<v-container fill-height>
						<v-layout justify-center align-center>
							<v-flex xs12>
								<div v-if="pages.length > 0" class="text-center">
									<h2 v-if="pages[0].onlyView">Minhas Edições</h2>
									<h2 v-else>Revisões da página
										<a :href="'/page/' + pages.ref" style="color: white">
											{{ pages.ref }}
										</a>
									</h2>

									<div class="row">
										<div class="col-sm-12 col-md-4 offset-md-6">
											<div class="input-group mb-3">
												<div class="input-group-prepend">
													<span class="input-group-text">Filtro</span>
												</div>
												<input type="text" v-model="filter" placeholder="Página, editor, data ou hora" class="form-control">
											</div>
										</div>
									</div>
								</div>
								<div v-if="pages.length > 0" class="row pl-2 pr-2 p-1" v-for="(page, index) in computedPages" :key="index">
									<div class="card hoverable col-12 col-md-8 offset-md-2" style="background-color: rgb(75, 75, 75);">
										<div class="card-body">
											<h5 class="card-title">
												<a :href="'/page/' + page.title" v-html="page.title" style="color: white;"></a>
											</h5>
											<p class="card-text">
												<div>
													Edição enviada por: {{ page.user.name }}
												</div>
												<div>
													Data e hora de edição: {{ new Date(page.editDate).toLocaleString() }}
												</div>
												<div v-if="page.onlyView">
													<div>
														<div v-if="page.feedbackDate">
															Data e hora do feedback: {{ new Date(page.feedbackDate).toLocaleString() }}
														</div>
														<div v-else>
															<div class="btn btn-sm bg-info">Esta revisão ainda não recebeu feedback</div>
														</div>
													</div>
													<div>
														<span v-if="page.status === 'aproved'" class="bg-success btn-sm">
															Aprovado +1 ponto
														</span>
														<span v-if="page.status === 'discarded'">
															<span class="bg-danger btn-sm">Edição rejeitada</span>
															<div>
																<span>Motivo: {{ page.anotation }}</span>
															</div>
														</span>
													</div>
												</div>
											</p>
											<button v-if="!page.onlyView" @click.stop="goTo('/feedback/' + page.editRef)" class="btn btn-success float-right">
												<i class="fa fa-edit"></i>
												Revisar
											</button>
											<button v-if="!page.onlyView" @click.stop="toggleModal(page)" class="btn btn-danger float-right mr-3">
												<i class="fa fa-trash"></i>
												Descartar
											</button>
										</div>
									</div>
								</div>
								<div class="row p-3" v-if="pages.length === 0">
									<h3>Não há edições</h3>
								</div>

								<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-hidden="true">
									<div class="modal-dialog" role="document">
										<div class="modal-content" style="background-color: rgb(75, 75, 75);">
											<div class="modal-header">
												<h5 class="modal-title">Confirmar Descarte</h5>
												<button type="button" class="close" data-dismiss="modal" aria-label="Close">
													<span aria-hidden="true">&times;</span>
												</button>
											</div>
											<div class="modal-body">
												<div class="row p-2">
													Informe um motivo para o descarte desta edição
												</div>
												<div class="row p-2">
													<v-text-field type="text" v-model="anotation" autocomplete></v-text-field>
												</div>
											</div>
											<div class="modal-footer">
												<button type="button" @click.stop="anotation = ''" class="btn btn-danger btn-lg col-md-4 col-sm-6" data-dismiss="modal">
													Cancelar
												</button>
												<button @click.stop="discardRevision" type="button" class="btn btn-success btn-lg col-md-4 col-sm-6">
													Descartar
												</button>
											</div>
										</div>
									</div>
								</div>
							</v-flex>
						</v-layout>
					</v-container>
				</v-content>
				<div>
					<in-snackbar />
				</div>
			</div>
		</v-app>
	</div>

	<%- include('./meta/footer') %>
	<script>
		new Vue({
			store: new Vuex.Store({
				modules: {
					app: {
						namespaced: true,
						state: <%- include('store/app/state.js') %>,
						getters: <%- include('store/app/getters.js') %>,
						mutations: <%- include('store/app/mutations.js') %>,
						actions: <%- include('store/app/actions.js') %>
					}
				}
			}),
			el: '#app',
			computed: {
				...mapGetters('app', ['user']),
				computedPages: {
					get() {
						return this.pages.filter((page) => {
							return this.filterPage(page)
						})
					},
					set(newPages) {
						this.pages = newPages
					}
				}
			},
			data() {
				return {
					page: {},
					pages: <%- JSON.stringify(pages) %>,
					anotation: '',
					filter: ''
				}
			},
			created() {
				this.setUser(<%- JSON.stringify(user) %>)
			},
			mounted() {
				this.$refs.ready.style.display = 'block'
				this.pages = this.pages.sort((a, b) => b.editDate - a.editDate)
			},
			methods: {
				...mapActions('app', [
					'showDialog',
					'goTo',
					'setUser'
				]),

				filterPage(page) {
					if (page.title) {
						let hasRef = page.title.toLowerCase().includes(this.filter.toLowerCase())
						let hasName = page.user.name.toLowerCase().includes(this.filter.toLowerCase())
						if (hasRef) return true
						if (hasName) return true
						if (new Date(page.editDate).toLocaleString().includes(this.filter)) return true
						return false
					}
					return true
				},

				discardRevision() {
					if (this.anotation.length > 5) {
						let revision = this.toRemove
						revision.status = 'discarded'
						revision.anotation = this.anotation
						this.$http.post('/feedback', revision)
							.then(() => {
								this.pages = this.pages.filter((page) => {
									return page !== revision
								})
								this.showDialog({
									message: 'Revisão de ' + revision.title + ' descartada com sucesso',
									color: 'success',
									icon: 'check-circle'
								})
								this.toggleModal({})
							})
					} else {
						this.showDialog({
							message: 'Por favor informe um motivo',
							color: 'orange',
							icon: 'exclamation-circle'
						})
					}
				},

				showReference(ref) {
					location.href = '#' + ref
					const card = document.getElementById(ref)
					card.style.backgroundColor = 'rgb(100, 100, 100)'
					setTimeout(() => {
						card.style.backgroundColor = 'rgb(75, 75, 75)'
					}, 2000)
				},

				toggleModal(page) {
					this.toRemove = page
					$('#modal').modal('toggle')
				}
			},
			beforeMount() {
				var loading = document.querySelector("#loading")
				document.body.removeChild(loading)
			}
		})
	</script>

</body>

</html>
